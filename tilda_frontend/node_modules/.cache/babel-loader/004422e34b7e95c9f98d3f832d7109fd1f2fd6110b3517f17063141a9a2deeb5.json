{"ast":null,"code":"var _jsxFileName = \"/Users/georgyshustov/tilda_frontend/src/components/PageTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './PageTable.css';\nimport SiteCard from './SiteCard';\nimport PageTable from './PageTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sites, setSites] = useState([]);\n  const [pages, setPages] = useState([]);\n  const [selectedSite, setSelectedSite] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // Получаем список сайтов при загрузке компонента\n    setLoading(true);\n    axios.get('http://localhost:5000/api/sites').then(response => {\n      setSites(response.data.result);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Ошибка при загрузке сайтов:', error);\n      setLoading(false);\n    });\n  }, []);\n  const fetchPages = projectId => {\n    // Получаем список страниц для выбранного сайта\n    setLoading(true);\n    axios.get(`http://localhost:5000/api/sites/${projectId}/pages`).then(response => {\n      setPages(response.data.result);\n      setSelectedSite(projectId);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Ошибка при загрузке страниц:', error);\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u0430\\u0439\\u0442\\u044B Tilda\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-cards\",\n        children: sites.map(site => /*#__PURE__*/_jsxDEV(SiteCard, {\n          site: site,\n          onClick: () => fetchPages(site.id),\n          selected: site.id === selectedSite // Передаем состояние выбранности\n        }, site.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), selectedSite && /*#__PURE__*/_jsxDEV(PageTable, {\n        pages: pages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MwY7+zPrg8w/Kc+f0ibn3PeOUbE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","SiteCard","PageTable","jsxDEV","_jsxDEV","App","_s","sites","setSites","pages","setPages","selectedSite","setSelectedSite","loading","setLoading","get","then","response","data","result","catch","error","console","fetchPages","projectId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","site","onClick","id","selected","_c","$RefreshReg$"],"sources":["/Users/georgyshustov/tilda_frontend/src/components/PageTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './PageTable.css';\nimport SiteCard from './SiteCard';\nimport PageTable from './PageTable';\n\nfunction App() {\n  const [sites, setSites] = useState([]);\n  const [pages, setPages] = useState([]);\n  const [selectedSite, setSelectedSite] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // Получаем список сайтов при загрузке компонента\n    setLoading(true);\n    axios.get('http://localhost:5000/api/sites')\n      .then(response => {\n        setSites(response.data.result);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Ошибка при загрузке сайтов:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  const fetchPages = (projectId) => {\n    // Получаем список страниц для выбранного сайта\n    setLoading(true);\n    axios.get(`http://localhost:5000/api/sites/${projectId}/pages`)\n      .then(response => {\n        setPages(response.data.result);\n        setSelectedSite(projectId);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Ошибка при загрузке страниц:', error);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Сайты Tilda</h1>\n      <div className=\"container\">\n        {loading ? <p>Загрузка...</p> : (\n          <div className=\"site-cards\">\n            {sites.map(site => (\n              <SiteCard\n                key={site.id}\n                site={site}\n                onClick={() => fetchPages(site.id)}\n                selected={site.id === selectedSite} // Передаем состояние выбранности\n              />\n            ))}\n          </div>\n        )}\n\n        {selectedSite && (\n          <PageTable pages={pages} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}