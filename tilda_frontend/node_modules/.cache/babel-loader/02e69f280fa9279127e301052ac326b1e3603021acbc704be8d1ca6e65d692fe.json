{"ast":null,"code":"import axios from 'axios';\n\n// Настройка базового URL и тайм-аута для всех запросов\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // Базовый URL для всех запросов\n  timeout: 10000 // Максимальное время ожидания ответа (10 секунд)\n});\n\n// Функция для получения списка сайтов\nexport const getSites = async () => {\n  try {\n    const response = await apiClient.get('/sites');\n    return response.data.result; // Возвращаем только результат из данных\n  } catch (error) {\n    console.error('Ошибка при загрузке сайтов:', error);\n    throw error; // Пробрасываем ошибку для дальнейшей обработки\n  }\n};\n\n// Функция для получения списка страниц для конкретного проекта\nexport const getPages = async projectId => {\n  try {\n    const response = await apiClient.get(`/sites/${projectId}/pages`);\n    return response.data.result; // Возвращаем только результат из данных\n  } catch (error) {\n    console.error('Ошибка при загрузке страниц:', error);\n    throw error; // Пробрасываем ошибку для дальнейшей обработки\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","getSites","response","get","data","result","error","console","getPages","projectId"],"sources":["/Users/georgyshustov/tilda_project/tilda_frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Настройка базового URL и тайм-аута для всех запросов\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api', // Базовый URL для всех запросов\n  timeout: 10000, // Максимальное время ожидания ответа (10 секунд)\n});\n\n// Функция для получения списка сайтов\nexport const getSites = async () => {\n  try {\n    const response = await apiClient.get('/sites');\n    return response.data.result; // Возвращаем только результат из данных\n  } catch (error) {\n    console.error('Ошибка при загрузке сайтов:', error);\n    throw error; // Пробрасываем ошибку для дальнейшей обработки\n  }\n};\n\n// Функция для получения списка страниц для конкретного проекта\nexport const getPages = async (projectId) => {\n  try {\n    const response = await apiClient.get(`/sites/${projectId}/pages`);\n    return response.data.result; // Возвращаем только результат из данных\n  } catch (error) {\n    console.error('Ошибка при загрузке страниц:', error);\n    throw error; // Пробрасываем ошибку для дальнейшей обработки\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,QAAQ,CAAC;IAC9C,OAAOD,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOC,SAAS,IAAK;EAC3C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,UAAUM,SAAS,QAAQ,CAAC;IACjE,OAAOP,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}