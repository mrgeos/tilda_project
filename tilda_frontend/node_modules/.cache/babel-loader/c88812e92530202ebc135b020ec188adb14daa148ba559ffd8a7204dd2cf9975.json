{"ast":null,"code":"const performDownload = async () => {\n  setIsDownloading(true); // Устанавливаем состояние загрузки\n\n  const newDownloads = selectedPages.map(pageId => {\n    const page = pages.find(p => p.id === pageId);\n    return {\n      id: pageId,\n      title: page.title,\n      progress: 0,\n      status: 'archiving',\n      size: null\n    };\n  });\n  setDownloads([...downloads, ...newDownloads]);\n  setIsPanelVisible(true);\n  for (const pageId of selectedPages) {\n    const page = pages.find(p => p.id === pageId);\n    if (page) {\n      try {\n        // Добавляем задержку в 3 секунды перед началом скачивания\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        const response = await axios.get(`https://api.tildacdn.info/v1/getpagefullexport/?publickey=${publicKey}&secretkey=${secretKey}&pageid=${pageId}`);\n        const pageData = response.data.result;\n        const zip = new JSZip();\n\n        // Обновляем статус на \"архивируется\"\n        setDownloads(downloads => downloads.map(download => download.id === pageId ? {\n          ...download,\n          status: 'archiving'\n        } : download));\n        zip.file(pageData.filename, pageData.html);\n        for (const image of pageData.images) {\n          if (image.from && image.to) {\n            const imageResponse = await axios.get(image.from, {\n              responseType: 'arraybuffer'\n            });\n            zip.file(image.to, imageResponse.data);\n          }\n        }\n\n        // Генерация архива\n        const zipBlob = await zip.generateAsync({\n          type: 'blob'\n        }, metadata => {\n          setDownloads(downloads => downloads.map(download => download.id === pageId ? {\n            ...download,\n            progress: metadata.percent.toFixed(2),\n            size: (metadata.total / (1024 * 1024)).toFixed(2)\n          } : download));\n        });\n\n        // Обновляем статус на \"скачивание\"\n        setDownloads(downloads => downloads.map(download => download.id === pageId ? {\n          ...download,\n          status: 'downloading',\n          progress: 100\n        } : download));\n\n        // Сохранение архива\n        saveAs(zipBlob, `${pageData.filename}.zip`);\n\n        // Обновляем статус на \"завершено\"\n        setDownloads(downloads => downloads.map(download => download.id === pageId ? {\n          ...download,\n          status: 'completed'\n        } : download));\n      } catch (error) {\n        console.error('Ошибка при загрузке страницы:', error);\n        setDownloads(downloads => downloads.map(download => download.id === pageId ? {\n          ...download,\n          status: 'error'\n        } : download));\n      }\n    }\n  }\n\n  // Сброс выбранных страниц после завершения скачивания\n  setSelectedPages([]);\n  setIsConfirmationVisible(false); // Закрываем диалоговое окно после выполнения скачивания\n  setIsDownloading(false); // Снимаем состояние загрузки\n};","map":{"version":3,"names":["performDownload","setIsDownloading","newDownloads","selectedPages","map","pageId","page","pages","find","p","id","title","progress","status","size","setDownloads","downloads","setIsPanelVisible","Promise","resolve","setTimeout","response","axios","get","publicKey","secretKey","pageData","data","result","zip","JSZip","download","file","filename","html","image","images","from","to","imageResponse","responseType","zipBlob","generateAsync","type","metadata","percent","toFixed","total","saveAs","error","console","setSelectedPages","setIsConfirmationVisible"],"sources":["/Users/georgyshustov/tilda_project/tilda_frontend/src/components/PageTable.js"],"sourcesContent":["const performDownload = async () => {\n  setIsDownloading(true); // Устанавливаем состояние загрузки\n\n  const newDownloads = selectedPages.map((pageId) => {\n    const page = pages.find((p) => p.id === pageId);\n    return { id: pageId, title: page.title, progress: 0, status: 'archiving', size: null };\n  });\n\n  setDownloads([...downloads, ...newDownloads]);\n  setIsPanelVisible(true);\n\n  for (const pageId of selectedPages) {\n    const page = pages.find((p) => p.id === pageId);\n    if (page) {\n      try {\n        // Добавляем задержку в 3 секунды перед началом скачивания\n        await new Promise(resolve => setTimeout(resolve, 3000));\n\n        const response = await axios.get(`https://api.tildacdn.info/v1/getpagefullexport/?publickey=${publicKey}&secretkey=${secretKey}&pageid=${pageId}`);\n        const pageData = response.data.result;\n        const zip = new JSZip();\n\n        // Обновляем статус на \"архивируется\"\n        setDownloads((downloads) =>\n          downloads.map((download) =>\n            download.id === pageId ? { ...download, status: 'archiving' } : download\n          )\n        );\n\n        zip.file(pageData.filename, pageData.html);\n\n        for (const image of pageData.images) {\n          if (image.from && image.to) {\n            const imageResponse = await axios.get(image.from, { responseType: 'arraybuffer' });\n            zip.file(image.to, imageResponse.data);\n          }\n        }\n\n        // Генерация архива\n        const zipBlob = await zip.generateAsync({ type: 'blob' }, (metadata) => {\n          setDownloads((downloads) =>\n            downloads.map((download) =>\n              download.id === pageId\n                ? { ...download, progress: metadata.percent.toFixed(2), size: (metadata.total / (1024 * 1024)).toFixed(2) }\n                : download\n            )\n          );\n        });\n\n        // Обновляем статус на \"скачивание\"\n        setDownloads((downloads) =>\n          downloads.map((download) =>\n            download.id === pageId ? { ...download, status: 'downloading', progress: 100 } : download\n          )\n        );\n\n        // Сохранение архива\n        saveAs(zipBlob, `${pageData.filename}.zip`);\n\n        // Обновляем статус на \"завершено\"\n        setDownloads((downloads) =>\n          downloads.map((download) =>\n            download.id === pageId ? { ...download, status: 'completed' } : download\n          )\n        );\n\n      } catch (error) {\n        console.error('Ошибка при загрузке страницы:', error);\n        setDownloads((downloads) =>\n          downloads.map((download) =>\n            download.id === pageId ? { ...download, status: 'error' } : download\n          )\n        );\n      }\n    }\n  }\n\n  // Сброс выбранных страниц после завершения скачивания\n  setSelectedPages([]);\n  setIsConfirmationVisible(false); // Закрываем диалоговое окно после выполнения скачивания\n  setIsDownloading(false); // Снимаем состояние загрузки\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}