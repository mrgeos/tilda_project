{"ast":null,"code":"var _jsxFileName = \"/Users/georgyshustov/tilda_frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport StatusPanel from './components/StatusPanel';\nimport PageTable from './components/PageTable';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sites, setSites] = useState([]);\n  const [pages, setPages] = useState([]);\n  const [downloads, setDownloads] = useState([]);\n  const [isPanelVisible, setIsPanelVisible] = useState(true);\n  const [selectedPageIds, setSelectedPageIds] = useState([]); // Храним ID выбранных страниц\n\n  useEffect(() => {\n    fetchSites();\n  }, []);\n  const fetchSites = async () => {\n    try {\n      const response = await axios.get('/api/sites');\n      setSites(response.data.result);\n    } catch (error) {\n      console.error('Error fetching sites:', error);\n    }\n  };\n  const fetchPages = async projectId => {\n    try {\n      const response = await axios.get(`/api/pages?projectid=${projectId}`);\n      setPages(response.data.result);\n    } catch (error) {\n      console.error('Error fetching pages:', error);\n    }\n  };\n  const handleDownload = async (pageId, title) => {\n    const downloadItem = {\n      id: pageId,\n      title: title,\n      status: 'archiving',\n      progress: 0\n    };\n    setDownloads(prevDownloads => [...prevDownloads, downloadItem]);\n    try {\n      const response = await axios.get(`/api/download?pageid=${pageId}`, {\n        responseType: 'blob',\n        // Ожидаем получения бинарных данных\n        onDownloadProgress: progressEvent => {\n          const total = progressEvent.total;\n          const current = progressEvent.loaded;\n          const percentCompleted = Math.floor(current / total * 100);\n          setDownloads(prevDownloads => prevDownloads.map(d => d.id === pageId ? {\n            ...d,\n            progress: percentCompleted\n          } : d));\n        }\n      });\n\n      // Определяем размер файла в мегабайтах\n      const sizeMB = (response.data.size / (1024 * 1024)).toFixed(2);\n      setDownloads(prevDownloads => prevDownloads.map(d => d.id === pageId ? {\n        ...d,\n        status: 'downloading',\n        size: sizeMB\n      } : d));\n\n      // Создаем ссылку для скачивания\n      const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `${title}.zip`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      // После завершения скачивания\n      setDownloads(prevDownloads => prevDownloads.map(d => d.id === pageId ? {\n        ...d,\n        status: 'completed'\n      } : d));\n\n      // Снимаем чекбоксы\n      setSelectedPageIds(prevSelected => prevSelected.filter(id => id !== pageId));\n    } catch (error) {\n      setDownloads(prevDownloads => prevDownloads.map(d => d.id === pageId ? {\n        ...d,\n        status: 'error'\n      } : d));\n      console.error('Error downloading file:', error);\n    }\n  };\n  const togglePanelVisibility = () => {\n    setIsPanelVisible(!isPanelVisible);\n  };\n  const handleHideCompleted = () => {\n    setDownloads(prevDownloads => prevDownloads.filter(d => d.status !== 'completed'));\n  };\n\n  // Функция для обновления состояния выбранных страниц\n  const handlePageSelectionChange = (pageId, isSelected) => {\n    if (isSelected) {\n      setSelectedPageIds(prevSelected => [...prevSelected, pageId]);\n    } else {\n      setSelectedPageIds(prevSelected => prevSelected.filter(id => id !== pageId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u0430\\u0439\\u0442\\u044B Tilda\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), sites.map(site => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: site.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchPages(site.id),\n        children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, site.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)), pages.length > 0 && /*#__PURE__*/_jsxDEV(PageTable, {\n      pages: pages,\n      handleDownload: handleDownload,\n      selectedPageIds: selectedPageIds,\n      onSelectionChange: handlePageSelectionChange // Передаем функцию для обработки изменений\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StatusPanel, {\n      downloads: downloads,\n      cancelDownload: () => {} // Функция отмены скачивания, можно позже реализовать\n      ,\n      togglePanel: togglePanelVisibility,\n      isPanelVisible: isPanelVisible,\n      hideCompleted: handleHideCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wCoPSwXQnXYTzfhYjKtT860gwHQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","StatusPanel","PageTable","jsxDEV","_jsxDEV","App","_s","sites","setSites","pages","setPages","downloads","setDownloads","isPanelVisible","setIsPanelVisible","selectedPageIds","setSelectedPageIds","fetchSites","response","get","data","result","error","console","fetchPages","projectId","handleDownload","pageId","title","downloadItem","id","status","progress","prevDownloads","responseType","onDownloadProgress","progressEvent","total","current","loaded","percentCompleted","Math","floor","map","d","sizeMB","size","toFixed","downloadUrl","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","prevSelected","filter","togglePanelVisibility","handleHideCompleted","handlePageSelectionChange","isSelected","className","children","fileName","_jsxFileName","lineNumber","columnNumber","site","onClick","length","onSelectionChange","cancelDownload","togglePanel","hideCompleted","_c","$RefreshReg$"],"sources":["/Users/georgyshustov/tilda_frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport StatusPanel from './components/StatusPanel';\nimport PageTable from './components/PageTable';\nimport './App.css';\n\nfunction App() {\n  const [sites, setSites] = useState([]);\n  const [pages, setPages] = useState([]);\n  const [downloads, setDownloads] = useState([]);\n  const [isPanelVisible, setIsPanelVisible] = useState(true);\n  const [selectedPageIds, setSelectedPageIds] = useState([]); // Храним ID выбранных страниц\n\n  useEffect(() => {\n    fetchSites();\n  }, []);\n\n  const fetchSites = async () => {\n    try {\n      const response = await axios.get('/api/sites');\n      setSites(response.data.result);\n    } catch (error) {\n      console.error('Error fetching sites:', error);\n    }\n  };\n\n  const fetchPages = async (projectId) => {\n    try {\n      const response = await axios.get(`/api/pages?projectid=${projectId}`);\n      setPages(response.data.result);\n    } catch (error) {\n      console.error('Error fetching pages:', error);\n    }\n  };\n\n  const handleDownload = async (pageId, title) => {\n    const downloadItem = {\n      id: pageId,\n      title: title,\n      status: 'archiving',\n      progress: 0\n    };\n    setDownloads(prevDownloads => [...prevDownloads, downloadItem]);\n\n    try {\n      const response = await axios.get(`/api/download?pageid=${pageId}`, {\n        responseType: 'blob', // Ожидаем получения бинарных данных\n        onDownloadProgress: progressEvent => {\n          const total = progressEvent.total;\n          const current = progressEvent.loaded;\n          const percentCompleted = Math.floor((current / total) * 100);\n          setDownloads(prevDownloads => prevDownloads.map(d =>\n            d.id === pageId ? { ...d, progress: percentCompleted } : d\n          ));\n        }\n      });\n\n      // Определяем размер файла в мегабайтах\n      const sizeMB = (response.data.size / (1024 * 1024)).toFixed(2);\n      setDownloads(prevDownloads => prevDownloads.map(d =>\n        d.id === pageId ? { ...d, status: 'downloading', size: sizeMB } : d\n      ));\n\n      // Создаем ссылку для скачивания\n      const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `${title}.zip`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      // После завершения скачивания\n      setDownloads(prevDownloads => prevDownloads.map(d =>\n        d.id === pageId ? { ...d, status: 'completed' } : d\n      ));\n\n      // Снимаем чекбоксы\n      setSelectedPageIds(prevSelected => prevSelected.filter(id => id !== pageId));\n\n    } catch (error) {\n      setDownloads(prevDownloads => prevDownloads.map(d =>\n        d.id === pageId ? { ...d, status: 'error' } : d\n      ));\n      console.error('Error downloading file:', error);\n    }\n  };\n\n  const togglePanelVisibility = () => {\n    setIsPanelVisible(!isPanelVisible);\n  };\n\n  const handleHideCompleted = () => {\n    setDownloads(prevDownloads => prevDownloads.filter(d => d.status !== 'completed'));\n  };\n\n  // Функция для обновления состояния выбранных страниц\n  const handlePageSelectionChange = (pageId, isSelected) => {\n    if (isSelected) {\n      setSelectedPageIds(prevSelected => [...prevSelected, pageId]);\n    } else {\n      setSelectedPageIds(prevSelected => prevSelected.filter(id => id !== pageId));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Сайты Tilda</h1>\n      {sites.map(site => (\n        <div key={site.id}>\n          <h2>{site.title}</h2>\n          <button onClick={() => fetchPages(site.id)}>Показать страницы</button>\n        </div>\n      ))}\n      {pages.length > 0 && (\n        <PageTable\n          pages={pages}\n          handleDownload={handleDownload}\n          selectedPageIds={selectedPageIds}\n          onSelectionChange={handlePageSelectionChange} // Передаем функцию для обработки изменений\n        />\n      )}\n      <StatusPanel\n        downloads={downloads}\n        cancelDownload={() => {}} // Функция отмены скачивания, можно позже реализовать\n        togglePanel={togglePanelVisibility}\n        isPanelVisible={isPanelVisible}\n        hideCompleted={handleHideCompleted}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}